# Marathon Shell - LLM Setup Guide
# For AI assistants helping with development, building, and deployment

## Project Overview
Marathon Shell is a modern, touch-optimized Wayland compositor and shell environment built with Qt6 and QML. It provides a complete mobile-like desktop experience on Linux systems, with support for both native Wayland applications and custom Marathon apps.

---

## CRITICAL DEPENDENCIES

### Core Build Tools
- CMake 3.16+
- Ninja build system
- GCC/Clang with C++17 support
- pkg-config
- Git

### Qt6 Requirements (MINIMUM Qt 6.5.0)
**Essential Qt6 Modules:**
- qt6-qtbase-devel (Core, Gui, Widgets)
- qt6-qtdeclarative-devel (QML engine, Quick, QuickControls2)
- qt6-qtwayland-devel (Wayland client support)
- qt6-qtmultimedia-devel (audio/video playback)
- qt6-qtsvg-devel (SVG icon rendering)
- qt6-qtsql (SQLite for app databases)
- qt6-qtvirtualkeyboard (on-screen keyboard)
- qt6-qtwebengine-devel (CRITICAL for Browser app - Chromium-based web engine)
- qt6-qtpositioning-devel (GPS, location services for Maps app)
- qt6-qtlocation-devel (Maps and location-based services)

**Qt6 Wayland Compositor Dependencies:**
- qt6-qtwaylandcompositor-devel (CRITICAL for native app embedding)
- wayland-devel
- wayland-protocols-devel
- libxkbcommon-devel
- EGL/Mesa libraries

### System Libraries
**Graphics & Display:**
- mesa-libEGL-devel
- mesa-libGL-devel
- libdrm-devel
- libinput-devel

**Audio:**
- pulseaudio-libs-devel
- alsa-lib-devel

**System Integration:**
- systemd-devel (for logind integration)
- dbus-devel (for D-Bus system services)
- NetworkManager-devel (WiFi, Ethernet, cellular data)
- upower-devel (battery, power management)
- ModemManager-devel (cellular modem)
- geoclue2-devel (location services for native apps)
- bluez-libs-devel (Bluetooth)
- iio-sensor-proxy (accelerometer, ambient light, proximity)

**Terminal & Core Utilities (Runtime):**
- bash or zsh (shell)
- coreutils (ls, cp, mv, etc.)
- util-linux (mount, kill, etc.)
- procps-ng (ps, top, etc.)

**WebEngine Dependencies:**
- ffmpeg-free (video codecs for browser)
- gstreamer1-plugins-base (multimedia framework)
- gstreamer1-plugins-good (additional codecs)
- pipewire (modern audio/video routing)
- pipewire-pulse (PulseAudio compatibility)
- wireplumber (PipeWire session manager)

**Development & Debug Tools:**
- gdb (GNU debugger)
- strace (system call tracer)
- valgrind (memory profiler)
- perf (performance analyzer)
- htop (process monitor)

---

## DISTRIBUTION-SPECIFIC PACKAGES

### Fedora 40+ (Development Host)
```bash
# Core Build Tools
sudo dnf install cmake ninja-build gcc-c++ pkg-config git

# Qt6 Core
sudo dnf install qt6-qtbase-devel qt6-qtdeclarative-devel \
                 qt6-qtwayland-devel qt6-qtmultimedia-devel \
                 qt6-qtsvg-devel qt6-qtsql qt6-qtvirtualkeyboard \
                 qt6-qtwebengine-devel qt6-qtpositioning-devel \
                 qt6-qtlocation-devel

# Qt6 Wayland Compositor (CRITICAL!)
sudo dnf install qt6-qtwaylandcompositor-devel

# Wayland & Graphics
sudo dnf install wayland-devel wayland-protocols-devel \
                 mesa-libEGL-devel mesa-libGL-devel \
                 libxkbcommon-devel libdrm-devel libinput-devel

# System Services
sudo dnf install systemd-devel dbus-devel \
                 NetworkManager-devel upower-devel \
                 ModemManager-devel geoclue2-devel bluez-libs-devel \
                 iio-sensor-proxy

# Audio & Video
sudo dnf install pulseaudio-libs-devel alsa-lib-devel \
                 pipewire pipewire-pulseaudio wireplumber \
                 ffmpeg-free gstreamer1-plugins-base gstreamer1-plugins-good

# Terminal & Core Utils (Runtime)
sudo dnf install bash coreutils util-linux procps-ng

# Debug Tools (Optional but Recommended)
sudo dnf install gdb strace valgrind perf htop
```

### postmarketOS / Alpine Linux (Target Device)
**APKBUILD makedepends (for pmbootstrap):**
```apk
makedepends="
    cmake
    samurai
    qt6-qtbase-dev
    qt6-qtdeclarative-dev
    qt6-qtwayland-dev
    qt6-qtwebengine-dev
    qt6-qtmultimedia-dev
    qt6-qtsvg-dev
    qt6-qtpositioning-dev
    qt6-qtlocation-dev
    wayland-dev
    wayland-protocols
    mesa-dev
    dbus-dev
    eudev-dev
    libinput-dev
"
```

**APKBUILD depends (runtime dependencies):**
```apk
depends="
    qt6-qtbase
    qt6-qtdeclarative
    qt6-qtwayland
    qt6-qtwebengine
    qt6-qtmultimedia
    qt6-qtsvg
    qt6-qtsql
    qt6-qtvirtualkeyboard
    qt6-qtpositioning
    qt6-qtlocation
    wayland
    wayland-protocols
    mesa
    mesa-gbm
    mesa-egl
    mesa-dri-gallium
    mesa-gles
    pipewire
    pipewire-pulse
    wireplumber
    pulseaudio-utils
    networkmanager
    upower
    modemmanager
    geoclue
    bluez
    iio-sensor-proxy
    bash
    coreutils
    util-linux
    dbus
    polkit
    greetd
"
```

### Ubuntu/Debian 24.04+
```bash
sudo apt install cmake ninja-build build-essential pkg-config git \
                 qt6-base-dev qt6-declarative-dev qt6-wayland-dev \
                 qt6-webengine-dev qt6-multimedia-dev qt6-svg-dev \
                 qt6-positioning-dev qt6-location-dev libqt6sql6 \
                 qtvirtualkeyboard-plugin \
                 libwayland-dev wayland-protocols \
                 libegl1-mesa-dev libgl1-mesa-dev \
                 libxkbcommon-dev libdrm-dev libinput-dev \
                 libsystemd-dev libdbus-1-dev \
                 network-manager-dev libupower-glib-dev \
                 modemmanager-dev libgeoclue-2-dev libbluetooth-dev \
                 libpulse-dev libasound2-dev \
                 pipewire pipewire-pulse wireplumber \
                 ffmpeg gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
                 iio-sensor-proxy bash coreutils util-linux procps \
                 gdb strace valgrind linux-tools-generic htop
```

---

## BUILD PROCESS

### Standard Development Build (Fedora/Ubuntu)
```bash
# Clone repository
git clone https://github.com/patrickjquinn/Marathon-Shell.git
cd Marathon-Shell

# Create build directory
mkdir -p build
cd build

# Configure with CMake
cmake .. -G Ninja \
  -DCMAKE_BUILD_TYPE=RelWithDebInfo \
  -DCMAKE_INSTALL_PREFIX=/usr

# Build
ninja

# Install system-wide (optional)
sudo ninja install

# Or run from build directory for development
cd ..
./run.sh
```

### postmarketOS Build (pmbootstrap)
```bash
# In your Marathon-Shell directory, create APKBUILD
# See shell/APKBUILD for the complete package definition

# Build with pmbootstrap
pmbootstrap build marathon-shell

# Install to device
pmbootstrap install --add marathon-shell

# Flash device
pmbootstrap flasher flash_rootfs
```

---

## ENVIRONMENT VARIABLES

### Required for Qt Virtual Keyboard
```bash
export QT_IM_MODULE=qtvirtualkeyboard
```

### Development Debugging
```bash
export MARATHON_DEBUG=1
export QT_LOGGING_RULES="*.debug=true;qt.qml.binding.removal.info=false"
```

### Wayland Compositor
```bash
export WAYLAND_DISPLAY=marathon-wayland-0
export XDG_RUNTIME_DIR=/run/user/$(id -u)
```

### Performance Tuning
```bash
export QML_DISABLE_DISK_CACHE=0
export QML_FORCE_DISK_CACHE=1
export QT_QUICK_CONTROLS_IMAGINE_PATH=""
export QT_ENABLE_HIGHDPI_SCALING=0  # Custom DPI scaling in shell
```

---

## PROJECT STRUCTURE

```
Marathon-Shell/
├── shell/                  # Main shell application
│   ├── main.cpp           # Qt application entry point
│   ├── CMakeLists.txt     # Shell build configuration
│   ├── qml/               # QML UI components
│   │   ├── Main.qml
│   │   ├── MarathonShell.qml
│   │   ├── components/    # Reusable UI components
│   │   ├── services/      # System service QML singletons
│   │   ├── stores/        # State management stores
│   │   ├── core/          # Core utilities (Constants, Logger)
│   │   └── MarathonUI/    # Design system components
│   ├── src/               # C++ backend services
│   │   ├── waylandcompositor.cpp (Wayland compositor)
│   │   ├── networkmanagercpp.cpp (NetworkManager D-Bus)
│   │   ├── powermanagercpp.cpp   (UPower D-Bus)
│   │   ├── modemmanagercpp.cpp   (ModemManager D-Bus)
│   │   └── ... (other system integrations)
│   └── resources/         # Images, icons, sounds, wallpapers
├── apps/                  # Marathon applications
│   ├── settings/          # Settings app
│   ├── browser/           # Web browser
│   ├── messages/          # Messaging app
│   └── ... (other apps)
├── CMakeLists.txt         # Root build configuration
├── APKBUILD              # postmarketOS package definition
├── marathon-shell-session # Session startup script
├── marathon.desktop      # Wayland session file
└── run.sh                # Development startup script
```

---

## KEY TECHNICAL DETAILS

### Qt Modules Explanation
1. **QtWaylandCompositor** - CRITICAL for embedding native Wayland apps
   - Provides QWaylandCompositor base class
   - Handles XDG shell protocol
   - Manages surface creation and rendering
   - Required for native app integration

2. **QtQml/QtQuick** - UI framework
   - QML engine and runtime
   - QtQuick for hardware-accelerated rendering
   - Property bindings and signals

3. **QtVirtualKeyboard** - On-screen keyboard
   - InputPanel QML component
   - Automatic input field detection
   - Must be installed separately on some distros

4. **QtMultimedia** - Media playback
   - Audio/video playback in apps
   - Camera integration

5. **QtSql** - Database access
   - SQLite driver for app storage
   - Call history, SMS, contacts, media libraries

6. **QtWebEngineQuick** - Web browser engine (CRITICAL for Browser app)
   - Chromium-based web rendering
   - HTML5, CSS3, JavaScript support
   - Video/audio codec support via ffmpeg/gstreamer
   - Requires significant disk space (~200MB)

7. **QtPositioning/QtLocation** - Location services (Maps app)
   - GPS coordinate handling
   - Location-based services
   - Map rendering and geocoding

8. **QtQuickControls2** - Modern UI controls
   - Material, Universal, Imagine styles
   - Touch-optimized controls
   - Required by many QML apps

### D-Bus System Integration
Marathon Shell integrates with system services via D-Bus:
- **NetworkManager** - WiFi, Ethernet, cellular data management
- **UPower** - Battery status, charging state, power management
- **ModemManager** - Cellular modem control, signal strength
- **systemd-logind** - Session management, sleep/hibernate, backlight
- **GeoClue2** - Location services (used by native apps)
- **BlueZ** - Bluetooth device management

### Wayland Compositor Role
Marathon Shell acts as a Wayland compositor, meaning:
- It manages all display output
- It handles input events (touch, mouse, keyboard)
- It embeds native Wayland applications as surfaces
- It MUST NOT set `QT_QPA_PLATFORM=wayland` (compositors are not clients!)

---

## COMMON BUILD ISSUES

### Issue: "module QtWaylandCompositor not found"
**Solution:** Install qt6-qtwaylandcompositor-devel (Fedora) or qt6-wayland-dev (Ubuntu)

### Issue: "QSQLITE driver not loaded"
**Solution:** Install qt6-qtsql or libqt6sql6-sqlite

### Issue: "module QtQuick.VirtualKeyboard is not installed"
**Solution:** Install qt6-qtvirtualkeyboard or qtvirtualkeyboard-plugin

### Issue: "module QtWebEngine not found" or "Browser will use mockup UI"
**Solution:** Install qt6-qtwebengine-devel (Fedora) or qt6-webengine-dev (Ubuntu/Debian)
**Note:** WebEngine is LARGE (~200MB) and requires Chromium dependencies

### Issue: "QtPositioning/QtLocation not found"
**Solution:** Install qt6-qtpositioning-devel and qt6-qtlocation-devel (Fedora) or qt6-positioning-dev and qt6-location-dev (Ubuntu)

### Issue: "No EGL_WL_bind_wayland_display extension"
**Solution:** This is a warning, not an error. It means software rendering is used instead of GPU acceleration. Can be ignored in VMs.

### Issue: "NetworkManager/UPower/ModemManager not available"
**Solution:** Install respective development packages and ensure services are running:
```bash
sudo systemctl start NetworkManager ModemManager upower
```

### Issue: "Terminal app libterminal-plugin.so not found"
**Solution:** Ensure terminal plugin is built and installed:
```bash
cmake --build build --target terminal-plugin
sudo cmake --install build-apps
```

### Issue: Browser shows blank or crashes loading pages
**Solution:** Install codec dependencies:
```bash
# Fedora
sudo dnf install ffmpeg-free gstreamer1-plugins-{base,good,bad-free}

# Ubuntu
sudo apt install ffmpeg gstreamer1.0-plugins-{base,good,bad}
```

---

## DEPLOYMENT NOTES

### System-Wide Installation
After `sudo ninja install`, Marathon Shell installs:
- Binary: `/usr/bin/marathon-shell-bin`
- Session script: `/usr/bin/marathon-shell-session`
- Desktop file: `/usr/share/wayland-sessions/marathon.desktop`
- Apps: `/usr/share/marathon-apps/`
- Systemd service: `/usr/lib/systemd/user/marathon-shell.service`
- Polkit policy: `/usr/share/polkit-1/actions/org.marathonos.shell.policy`

### postmarketOS Integration
On postmarketOS, Marathon Shell becomes a selectable session in the display manager (greetd, LightDM, etc.). The shell automatically:
- Detects real hardware (battery, modem, sensors)
- Falls back to mock data in VMs/unsupported hardware
- Scales UI based on device DPI
- Manages power button, volume keys, etc.

### Running from Build Directory (Development)
```bash
./run.sh  # Sets up environment and launches shell
```

---

## TESTING & DEBUGGING

### Check if all modules loaded correctly:
```bash
MARATHON_DEBUG=1 ./build/shell/marathon-shell-bin 2>&1 | grep -E "INFO|WARNING|ERROR"
```

### Check Qt module availability:
```bash
qml6 --list-modules | grep -E "VirtualKeyboard|WaylandCompositor"
```

### Verify Wayland compositor creation:
```bash
MARATHON_DEBUG=1 ./run.sh 2>&1 | grep "Compositor"
```

### Test native app launching:
```bash
# From within Marathon Shell, launch a native app
# Check logs for Wayland surface creation
```

---

## PERFORMANCE CONSIDERATIONS

### QML Compilation
- Shell uses AOT (Ahead-of-Time) QML compilation for performance
- Build generates `.cpp` files from `.qml` files
- Significantly faster than interpreted QML

### Touch Physics
- `flickDeceleration: 25000` - Snappy page transitions
- `maximumFlickVelocity: 8000` - Responsive to fast flicks
- `synchronousDrag: false` - Async dragging for smoothness

### DPI-Aware Scaling
- Uses physical DPI, not screen resolution
- `baseDPI: 96` - Desktop/web standard
- All UI elements scale based on actual pixel density
- Ensures consistent physical size across devices

---

## RESOURCES

- Repository: https://github.com/patrickjquinn/Marathon-Shell
- Qt Documentation: https://doc.qt.io/qt-6/
- Wayland Protocol: https://wayland.freedesktop.org/
- postmarketOS: https://postmarketos.org/
- pmbootstrap: https://gitlab.com/postmarketOS/pmbootstrap

---

## FOR LLM ASSISTANTS

When helping with Marathon Shell development:

1. **Always check Qt version** - Minimum Qt 6.5.0 required
2. **Verify Wayland compositor dependencies** - qt6-qtwaylandcompositor is CRITICAL
3. **Check D-Bus service availability** - Many features need system services running
4. **Understand the shell is a compositor** - It's NOT a Wayland client
5. **DPI scaling is custom** - Don't rely on Qt's built-in high-DPI scaling
6. **Virtual keyboard requires separate package** - Often not included in base Qt install
7. **postmarketOS uses Alpine packages** - Different names than Fedora/Ubuntu
8. **Mock mode is intentional** - Shell gracefully handles missing hardware
9. **WebEngine is optional but critical** - Browser app needs qt6-qtwebengine (~200MB)
10. **Terminal needs bash/shell** - TerminalEngine spawns QProcess for shell
11. **Sensors require iio-sensor-proxy** - For accelerometer, ambient light, etc.
12. **PipeWire is preferred over PulseAudio** - Modern audio routing

### Common Development Tasks
- **Adding new apps:** See `apps/` directory, each app has its own `CMakeLists.txt`
- **Modifying UI:** QML files in `shell/qml/`
- **System integration:** C++ services in `shell/src/`
- **Styling:** `shell/qml/core/Constants.qml` and `shell/qml/MarathonUI/`

---

Last Updated: 2025-10-23
Version: 1.0.0

